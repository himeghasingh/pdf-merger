{"ast":null,"code":"var _jsxFileName = \"/Users/imeghasingh/Documents/GitHub/pdf-merger/src/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport * as pdfjsLib from 'pdfjs-dist/webpack';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\nconst FileUpload = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [previews, setPreviews] = useState([]);\n  const [mergedPdfUrl, setMergedPdfUrl] = useState(null); // State to store merged PDF URL\n  const [isDownloading, setIsDownloading] = useState(false); // State to manage blinking and disabling\n  const fileInputRef = useRef(null);\n  const dropZoneRef = useRef(null);\n  const downloadButtonRef = useRef(null);\n  const handleFileChange = event => {\n    const files = Array.from(event.target.files);\n    processFiles(files);\n    fileInputRef.current.value = null; // Clear file input to allow re-uploading\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const files = Array.from(event.dataTransfer.files);\n    processFiles(files);\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n  const processFiles = files => {\n    const filePreviews = files.map(file => {\n      const fileReader = new FileReader();\n      return new Promise(resolve => {\n        fileReader.onload = async e => {\n          const arrayBuffer = e.target.result;\n          const pdfDoc = await pdfjsLib.getDocument({\n            data: arrayBuffer\n          }).promise;\n          const page = await pdfDoc.getPage(1); // Get the first page\n\n          const viewport = page.getViewport({\n            scale: 2\n          }); // Increase scale for larger preview\n          const canvas = document.createElement('canvas');\n          const context = canvas.getContext('2d');\n          canvas.height = viewport.height;\n          canvas.width = viewport.width;\n          await page.render({\n            canvasContext: context,\n            viewport: viewport\n          }).promise;\n          const imgURL = canvas.toDataURL();\n          resolve({\n            file,\n            imgURL\n          });\n        };\n        fileReader.readAsArrayBuffer(file);\n      });\n    });\n    Promise.all(filePreviews).then(newPreviews => {\n      setPreviews(prevPreviews => [...prevPreviews, ...newPreviews]);\n      setSelectedFiles(prevFiles => [...prevFiles, ...files]);\n    });\n  };\n  const handleRemoveFile = index => {\n    const updatedPreviews = previews.filter((_, i) => i !== index);\n    const updatedFiles = selectedFiles.filter((_, i) => i !== index);\n    setPreviews(updatedPreviews);\n    setSelectedFiles(updatedFiles);\n\n    // If no files are left, clear the input\n    if (updatedFiles.length === 0) {\n      fileInputRef.current.value = null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    selectedFiles.forEach(file => {\n      formData.append('files', file);\n    });\n    try {\n      const response = await axios.post('http://localhost:5001/upload', formData, {\n        responseType: 'blob'\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      setMergedPdfUrl(url); // Store the URL of the merged PDF\n\n      // Start blinking effect\n      setIsDownloading(true);\n\n      // Stop blinking effect after 2 seconds\n      setTimeout(() => {\n        setIsDownloading(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n  const handleDownload = () => {\n    const link = document.createElement('a');\n    link.href = mergedPdfUrl;\n    link.setAttribute('download', 'merged.pdf');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const handleDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n    const reorderedPreviews = Array.from(previews);\n    const [moved] = reorderedPreviews.splice(result.source.index, 1);\n    reorderedPreviews.splice(result.destination.index, 0, moved);\n    setPreviews(reorderedPreviews);\n    setSelectedFiles(reorderedPreviews.map(preview => preview.file));\n  };\n  const handleReset = () => {\n    setPreviews([]);\n    setSelectedFiles([]);\n    setMergedPdfUrl(null); // Clear the merged PDF URL\n    setIsDownloading(false); // Stop blinking effect\n    fileInputRef.current.value = null; // Reset file input\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Merger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drag-drop-area\",\n      ref: dropZoneRef,\n      onDrop: handleDrop,\n      onDragOver: handleDragOver,\n      onClick: () => fileInputRef.current.click(),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"upload-icon\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\",\n        multiple: true,\n        onChange: handleFileChange,\n        ref: fileInputRef,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"reset-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"submit-button\",\n        disabled: selectedFiles.length === 0,\n        children: \"Merge PDFs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: downloadButtonRef,\n        className: `download-button ${isDownloading ? 'blink' : ''}`,\n        onClick: handleDownload,\n        disabled: !mergedPdfUrl,\n        children: \"Download Merged\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-container\",\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [previews.map((preview, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: preview.file.name,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              className: \"preview-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: preview.imgURL,\n                alt: `Preview ${index + 1}`,\n                className: \"preview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-name\",\n                \"data-fullname\": preview.file.name,\n                children: preview.file.name.length > 15 ? `${preview.file.name.slice(0, 15)}...` : preview.file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-button\",\n                onClick: () => handleRemoveFile(index),\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 21\n            }, this)\n          }, preview.file.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"iMytyWlnKOr6KOmetFwe4rISUaw=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useRef","axios","pdfjsLib","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","FileUpload","_s","selectedFiles","setSelectedFiles","previews","setPreviews","mergedPdfUrl","setMergedPdfUrl","isDownloading","setIsDownloading","fileInputRef","dropZoneRef","downloadButtonRef","handleFileChange","event","files","Array","from","target","processFiles","current","value","handleDrop","preventDefault","stopPropagation","dataTransfer","handleDragOver","filePreviews","map","file","fileReader","FileReader","Promise","resolve","onload","e","arrayBuffer","result","pdfDoc","getDocument","data","promise","page","getPage","viewport","getViewport","scale","canvas","document","createElement","context","getContext","height","width","render","canvasContext","imgURL","toDataURL","readAsArrayBuffer","all","then","newPreviews","prevPreviews","prevFiles","handleRemoveFile","index","updatedPreviews","filter","_","i","updatedFiles","length","handleSubmit","formData","FormData","forEach","append","response","post","responseType","url","window","URL","createObjectURL","Blob","setTimeout","error","console","handleDownload","link","href","setAttribute","body","appendChild","click","removeChild","handleDragEnd","destination","reorderedPreviews","moved","splice","source","preview","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onDrop","onDragOver","onClick","type","id","multiple","onChange","style","display","disabled","onDragEnd","droppableId","direction","provided","innerRef","droppableProps","draggableId","name","draggableProps","dragHandleProps","src","alt","slice","placeholder","_c","$RefreshReg$"],"sources":["/Users/imeghasingh/Documents/GitHub/pdf-merger/src/FileUpload.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport * as pdfjsLib from 'pdfjs-dist/webpack';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport './FileUpload.css';\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\n\nconst FileUpload = () => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [previews, setPreviews] = useState([]);\n  const [mergedPdfUrl, setMergedPdfUrl] = useState(null); // State to store merged PDF URL\n  const [isDownloading, setIsDownloading] = useState(false); // State to manage blinking and disabling\n  const fileInputRef = useRef(null);\n  const dropZoneRef = useRef(null);\n  const downloadButtonRef = useRef(null);\n\n  const handleFileChange = (event) => {\n    const files = Array.from(event.target.files);\n    processFiles(files);\n    fileInputRef.current.value = null; // Clear file input to allow re-uploading\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const files = Array.from(event.dataTransfer.files);\n    processFiles(files);\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const processFiles = (files) => {\n    const filePreviews = files.map((file) => {\n      const fileReader = new FileReader();\n\n      return new Promise((resolve) => {\n        fileReader.onload = async (e) => {\n          const arrayBuffer = e.target.result;\n          const pdfDoc = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n          const page = await pdfDoc.getPage(1); // Get the first page\n\n          const viewport = page.getViewport({ scale: 2 }); // Increase scale for larger preview\n          const canvas = document.createElement('canvas');\n          const context = canvas.getContext('2d');\n          canvas.height = viewport.height;\n          canvas.width = viewport.width;\n\n          await page.render({ canvasContext: context, viewport: viewport }).promise;\n          const imgURL = canvas.toDataURL();\n          resolve({ file, imgURL });\n        };\n\n        fileReader.readAsArrayBuffer(file);\n      });\n    });\n\n    Promise.all(filePreviews).then((newPreviews) => {\n      setPreviews((prevPreviews) => [...prevPreviews, ...newPreviews]);\n      setSelectedFiles((prevFiles) => [...prevFiles, ...files]);\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    const updatedPreviews = previews.filter((_, i) => i !== index);\n    const updatedFiles = selectedFiles.filter((_, i) => i !== index);\n\n    setPreviews(updatedPreviews);\n    setSelectedFiles(updatedFiles);\n\n    // If no files are left, clear the input\n    if (updatedFiles.length === 0) {\n      fileInputRef.current.value = null;\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    selectedFiles.forEach((file) => {\n        formData.append('files', file);\n    });\n\n    try {\n        const response = await axios.post('http://localhost:5001/upload', formData, {\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        setMergedPdfUrl(url); // Store the URL of the merged PDF\n\n        // Start blinking effect\n        setIsDownloading(true);\n\n        // Stop blinking effect after 2 seconds\n        setTimeout(() => {\n            setIsDownloading(false);\n        }, 2000);\n    } catch (error) {\n        console.error('Error uploading files:', error);\n    }\n};\n\nconst handleDownload = () => {\n    const link = document.createElement('a');\n    link.href = mergedPdfUrl;\n    link.setAttribute('download', 'merged.pdf');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n};\n\n\n  const handleDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    const reorderedPreviews = Array.from(previews);\n    const [moved] = reorderedPreviews.splice(result.source.index, 1);\n    reorderedPreviews.splice(result.destination.index, 0, moved);\n    setPreviews(reorderedPreviews);\n    setSelectedFiles(reorderedPreviews.map(preview => preview.file));\n  };\n\n  const handleReset = () => {\n    setPreviews([]);\n    setSelectedFiles([]);\n    setMergedPdfUrl(null); // Clear the merged PDF URL\n    setIsDownloading(false); // Stop blinking effect\n    fileInputRef.current.value = null; // Reset file input\n  };\n\n  return (\n    <div className=\"centered-container\">\n      <h1>PDF Merger</h1>\n      <div\n        className=\"drag-drop-area\"\n        ref={dropZoneRef}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onClick={() => fileInputRef.current.click()}\n      >\n        <span className=\"upload-icon\">+</span>\n        <input\n          type=\"file\"\n          id=\"file-upload\"\n          multiple\n          onChange={handleFileChange}\n          ref={fileInputRef}\n          style={{ display: 'none' }}\n        />\n      </div>\n      <div className=\"button-container\">\n        <button onClick={handleReset} className=\"reset-button\">Reset</button>\n        <button\n          onClick={handleSubmit}\n          className=\"submit-button\"\n          disabled={selectedFiles.length === 0}\n        >\n          Merge PDFs\n        </button>\n        <button\n    ref={downloadButtonRef}\n    className={`download-button ${isDownloading ? 'blink' : ''}`}\n    onClick={handleDownload}\n    disabled={!mergedPdfUrl}\n>\n    Download Merged\n</button>\n\n      </div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided) => (\n            <div\n              className=\"preview-container\"\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {previews.map((preview, index) => (\n                <Draggable key={preview.file.name} draggableId={preview.file.name} index={index}>\n                  {(provided) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      className=\"preview-wrapper\"\n                    >\n                      <img src={preview.imgURL} alt={`Preview ${index + 1}`} className=\"preview-image\" />\n                      <div\n                        className=\"file-name\"\n                        data-fullname={preview.file.name}\n                      >\n                        {preview.file.name.length > 15 ? `${preview.file.name.slice(0, 15)}...` : preview.file.name}\n                      </div>\n                      <button className=\"remove-button\" onClick={() => handleRemoveFile(index)}>\n                        &times;\n                      </button>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}